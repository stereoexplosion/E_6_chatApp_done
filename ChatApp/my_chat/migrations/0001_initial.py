# Generated by Django 4.2.3 on 2023-07-09 08:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GroupChat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_chat_title', models.CharField(max_length=64)),
                ('photo_chat', models.ImageField(default='default_avatar/default.jpg', upload_to='group_chat_avatars')),
                ('chat_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_author', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Групповой чат',
                'verbose_name_plural': 'Групповые чаты',
            },
        ),
        migrations.CreateModel(
            name='ProfilePhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(default='default_avatar/default.jpg', upload_to='avatars')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Фото автара',
                'verbose_name_plural': 'Фотографии для аватаров',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=1200)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receiver', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Сообщение чата',
                'verbose_name_plural': 'Сообщения чатов',
                'ordering': ('timestamp',),
            },
        ),
        migrations.CreateModel(
            name='GroupMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_message', models.CharField(max_length=1200)),
                ('group_timestamp', models.DateTimeField(auto_now_add=True)),
                ('group_is_read', models.BooleanField(default=False)),
                ('group_chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat', to='my_chat.groupchat')),
                ('group_sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group_sender', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Сообшение группового чата',
                'verbose_name_plural': 'Сообщения групповых чатов',
                'ordering': ('group_timestamp',),
            },
        ),
        migrations.CreateModel(
            name='GroupChatUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='my_chat.groupchat')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='groupchat',
            name='members',
            field=models.ManyToManyField(related_name='members', through='my_chat.GroupChatUser', to=settings.AUTH_USER_MODEL),
        ),
    ]
